
class gameboard {
public:
    static char grid[HEIGHT][WIDTH];
    static string colorGrid[HEIGHT][WIDTH];

    gameboard() {
        for (int i = 0; i < HEIGHT; i++) {
            for (int j = 0; j < WIDTH; j++) {
                grid[i][j] = ' ';
                colorGrid[i][j] = RESET;
            }
        }
    }

    void displayBoard(int x, int y, Tetromino::shape &t, int ghostY) {
        moveCursorToTop();

        string border = "";
        bool isghostPiece;
        for (int i = 0; i < HEIGHT; i++) {
            border += char(219); // Left border
            for (int j = 1; j < WIDTH; j++) {
                bool tetrominoPart = false;
                bool isghostPiece=false;
                string color = RESET;

                if (i == 0 || i == HEIGHT - 1) {
                    border += char(219);
                    continue;
                }

                for (int ti = 0; ti < 4; ti++) {
                    for (int tj = 0; tj < 4; tj++) {
                        if (t.states[t.currState][ti][tj] == 1 && i == y + ti && j == x + tj) {
                            tetrominoPart = true;
                            color = Tetromino::getTetrominoColor(t.name);
                        }
                        if(i==ghostY+ ti && t.states[t.currState][ti][tj] == 1 && j==x+tj ){
                            color=GREY;
                            isghostPiece=true;
                        }
                    }
                }



                if (tetrominoPart) {
                    border += color +char(219) + RESET;
                }
                 else if (grid[i][j] != ' ') {
                    border += colorGrid[i][j] + char(219) + RESET;
                } 
                else if (isghostPiece) {
                    border += color + '#' + RESET; // Grey color for ghost
                }
                else {
                    border += " ";
                }
            }
            border += char(219); // Right border
            border += '\n';
        }
        cout << border;
    }

};
